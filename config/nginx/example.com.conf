proxy_cache_path /var/cache/nginx/example.com levels=2:2 keys_zone=example.com:50m inactive=24h max_size=1G use_temp_path=off;

upstream backand {
    server 127.0.0.1:1999;
    #server arh.one backup;
    keepalive 128;
}

# Кэширующий прокси
server {

    # Показывать версию nginx
    server_tokens off;

    # Порты и имя сервера
    listen 80 ;
    listen [::]:80;
    server_name example.com;

    # Кодировка по-умолчанию
    charset utf-8;

    # Логи
    access_log /var/log/nginx/example.com/access.log;
    error_log /var/log/nginx/example.com/error.log;
    log_not_found on;
    access_log on;

    # Делает 1 слэш из множества (переадресация)
    rewrite ^(.*?)//+(.*?)$ $1/$2 permanent;

    # Включает поддержку gzip
    gzip on;
    # Разрешает или запрещает распаковку ответов, сжатых методом gzip, для тех клиентов, которые его не поддерживают --with-http_gunzip_module
    gunzip on;
    # Сжимать данные ответов для proxy-серверов
    gzip_proxied any;
    # Запрещает сжатие ответа методом gzip для запросов с полями заголовка “User-Agent”
    gzip_disable "msie6";
    # Разрешает или запрещает выдавать в ответе поле заголовка “Vary: Accept-Encoding”
    gzip_vary on;
    # Уровень сжатия, 1 — минимальное, 9 — максимальное
    gzip_comp_level 6;
    # Устанавливает размер буффера, в котором хранится сжатая информация
    gzip_buffers 16 8k;
    # Устанавливает минимальную HTTP-версию запроса, необходимую для сжатия ответа
    gzip_http_version 1.1;

    # Запрет файлов
    location ~* ^.+\.(php|htaccess|htpassword|sql|dump)$ {
        return 403;
    }

    # Прокси статических файлов
    location ~* \.(jpg|jpeg|gif|png|svg|js|css|swf|otf|ttf|woff|ico)$ {

        # Разрешает только отпределённые типа сапросов
        limit_except GET HEAD {
            deny all;
        }

        # Время кэширования файлов на клиенте
        expires 7d;
        # Настройка access_log при проксировании
        access_log off;
        # Настройка log_not_found при проксировании
        log_not_found off;

        add_header Access-Control-Allow-Origin *;

        # Задаёт зону разделяемой памяти, используемой для кэширования
        proxy_cache example.com;
        # Если метод запроса клиента указан в этой директиве, то ответ будет закэширован
        proxy_cache_methods GET HEAD;
        # Задаёт ключ для кэширования
        proxy_cache_key $scheme$host$uri$is_args$args;
        # Задаёт время кэширования для разных кодов ответа
        proxy_cache_valid 200 1s;
        proxy_cache_valid 301 302 1s;
        proxy_cache_valid 400 403 404 1s;
        proxy_cache_valid 500 502 503 504 1s;
        proxy_cache_valid any 1s;
        # Определяет в каких случаях можно использовать устаревший закэшированный ответ
        proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504;
        # Позволяет запустить фоновый подзапрос для обновления просроченного элемента кэша, в то время как клиенту возвращается устаревший закэшированный ответ
        proxy_cache_background_update on;
        # Если включено, одновременно только одному запросу будет позволено заполнить новый элемент кэша
        proxy_cache_lock on;
        # Если последний запрос, переданный на проксируемый сервер для заполнения нового элемента кэша не завершился за указанное время, на проксируемый сервер может быть передан ещё один запрос
        proxy_cache_lock_age 1m;
        # Задаёт таймаут для proxy_cache_lock. По истечении указанного времени запрос будет передан на проксируемый сервер, однако ответ не будет закэширован
        proxy_cache_lock_timeout 1m;
        # Задаёт условия, при которых ответ не будет браться из кэша
        proxy_cache_bypass $cookie_psid;
        # Задаёт условия, при которых ответ не будет сохраняться в кэш
        proxy_no_cache $cookie_psid;
        # Разрешает ревалидацию просроченных элементов кэша при помощи условных запросов с полями заголовка “If-Modified-Since” и “If-None-Match”.
        proxy_cache_revalidate on;
        # Задаёт число запросов, после которого ответ будет закэширован
        proxy_cache_min_uses 1;

        # Задаёт версию протокола HTTP для проксирования
        proxy_http_version 1.1;
        # Определяет, использовать ли повторно SSL-сессии при работе с проксированным сервером
        # proxy_ssl_session_reuse on;
        # Запрещает обработку некоторых полей заголовка из ответа проксированного сервера
        proxy_ignore_headers Expires Cache-Control Set-Cookie;
        # Определяет, передавать ли клиенту проксированные ответы с кодом больше либо равным 300, или же перехватывать их и перенаправлять на обработку nginx’у с помощью директивы error_page
        proxy_intercept_errors on;
        # Передача реального ip в заголовке X-Real-IP
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Передача заголовка кодирования
        proxy_set_header Accept-Encoding $http_accept_encoding;
        # Очистка заголовка Proxy
        proxy_set_header Proxy "";
        # Очистка заголовка Connection
        proxy_set_header Connection "";
        # Проксирование заголовка Host
        proxy_set_header Host $host;
        # Адрес проксируемого сервера
        proxy_pass http://backand;
        proxy_redirect off;
        # Задаёт таймаут для установления соединения с проксированным сервером
        proxy_connect_timeout 10;
        # Задаёт таймаут при передаче запроса проксированному серверу
        proxy_send_timeout 10;
        # Задаёт таймаут при чтении ответа проксированного сервера
        proxy_read_timeout 10;
        # Определяет, в каких случаях запрос будет передан следующему серверу
        #proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        # Разрешает или запрещает использовать буферизацию ответов проксируемого сервера
        proxy_buffering off;

        # Добавляет заголовок со статусом кэша
        add_header X-Cache-Status $upstream_cache_status;

        # Задаёт максимально допустимый размер тела запроса клиента
        client_max_body_size    1m;
        # Задаёт размер буфера для чтения тела запроса клиента
        client_body_buffer_size 256k;

    }

    # Прокси динамических страниц
    location / {

        # Разрешает только отпределённые типа сапросов
        limit_except GET HEAD {
            deny all;
        }

        # Настройка access_log при проксировании
        access_log on;

        # Задаёт зону разделяемой памяти, используемой для кэширования
        proxy_cache example.com;
        # Если метод запроса клиента указан в этой директиве, то ответ будет закэширован
        proxy_cache_methods GET HEAD;
        # Задаёт ключ для кэширования
        proxy_cache_key $scheme$host$uri$is_args$args;
        # Задаёт время кэширования для разных кодов ответа
        proxy_cache_valid 200 1s;
        proxy_cache_valid 301 302 1s;
        proxy_cache_valid 400 403 404 1s;
        proxy_cache_valid 500 502 503 504 1s;
        proxy_cache_valid any 1s;
        # Определяет в каких случаях можно использовать устаревший закэшированный ответ
        proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504;
        # Позволяет запустить фоновый подзапрос для обновления просроченного элемента кэша, в то время как клиенту возвращается устаревший закэшированный ответ
        proxy_cache_background_update on;
        # Если включено, одновременно только одному запросу будет позволено заполнить новый элемент кэша
        proxy_cache_lock on;
        # Если последний запрос, переданный на проксируемый сервер для заполнения нового элемента кэша не завершился за указанное время, на проксируемый сервер может быть передан ещё один запрос
        proxy_cache_lock_age 1m;
        # Задаёт таймаут для proxy_cache_lock. По истечении указанного времени запрос будет передан на проксируемый сервер, однако ответ не будет закэширован
        proxy_cache_lock_timeout 1m;
        # Задаёт условия, при которых ответ не будет браться из кэша
        proxy_cache_bypass $cookie_psid;
        # Задаёт условия, при которых ответ не будет сохраняться в кэш
        proxy_no_cache $cookie_psid;
        # Разрешает ревалидацию просроченных элементов кэша при помощи условных запросов с полями заголовка “If-Modified-Since” и “If-None-Match”.
        proxy_cache_revalidate on;
        # Задаёт число запросов, после которого ответ будет закэширован
        proxy_cache_min_uses 1;

        # Задаёт версию протокола HTTP для проксирования
        proxy_http_version 1.1;
        # Определяет, использовать ли повторно SSL-сессии при работе с проксированным сервером
        # proxy_ssl_session_reuse on;
        # Запрещает обработку некоторых полей заголовка из ответа проксированного сервера
        proxy_ignore_headers Expires Cache-Control Set-Cookie;
        # Определяет, передавать ли клиенту проксированные ответы с кодом больше либо равным 300, или же перехватывать их и перенаправлять на обработку nginx’у с помощью директивы error_page
        proxy_intercept_errors on;
        # Передача реального ip в заголовке X-Real-IP
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Передача заголовка кодирования
        proxy_set_header Accept-Encoding $http_accept_encoding;
        # Очистка заголовка Proxy
        proxy_set_header Proxy "";
        # Очистка заголовка Connection
        proxy_set_header Connection "";
        # Проксирование заголовка Host
        proxy_set_header Host $host;
        # Адрес проксируемого сервера
        proxy_pass http://backand;
        # Задаёт таймаут для установления соединения с проксированным сервером
        proxy_connect_timeout 10;
        # Задаёт таймаут при передаче запроса проксированному серверу
        proxy_send_timeout 10;
        # Задаёт таймаут при чтении ответа проксированного сервера
        proxy_read_timeout 10;
        # Определяет, в каких случаях запрос будет передан следующему серверу
        #proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        # Разрешает или запрещает использовать буферизацию ответов проксируемого сервера
        proxy_buffering on;

        # Добавляет заголовок со статусом кэша
        add_header X-Cache-Status $upstream_cache_status;

        # Задаёт максимально допустимый размер тела запроса клиента
        client_max_body_size    1m;
        # Задаёт размер буфера для чтения тела запроса клиента
        client_body_buffer_size 256k;

    }

}
